public class Problem2 {

    // Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with and , the first terms will be:
    // 1,2,3,5,8,13,21,34,55,89....
    // By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

    private static final int START_NUMBER_1 = 1;
    private static final int START_NUMBER_2 = 2;

    private static final int END_NUMBER = 4_000_000;

    private static class Int_pair{
        public int value1;
        public int value2;
        public Int_pair(int value1, int value2) {
            this.value1 = value1;
            this.value2 = value2;
        }
    }
    private static Int_pair next_fibonacci_pair(Int_pair pair){
        return new Int_pair(pair.value2, pair.value1 + pair.value2);
    }
    private static Int_pair next_even_fibonacci_pair(Int_pair pair){
        return new Int_pair(pair.value2, pair.value1 + 4*pair.value2);
    }
    // O(
    public static int calculate(){
        int sum = 0;
        Int_pair fibonacci_pair = new Int_pair(START_NUMBER_1, START_NUMBER_2);
        //if (fibonacci_pair.value1%2==0) sum+=fibonacci_pair.value1;
        while(fibonacci_pair.value2 <= END_NUMBER){
            if (fibonacci_pair.value2%2==0) sum+=fibonacci_pair.value2;
            fibonacci_pair = next_fibonacci_pair(fibonacci_pair);
        }
        return sum;
    }

    public static int calculate_alternative(){

        Int_pair fibonacci_pair = new Int_pair(2, 8);
        int sum = fibonacci_pair.value1;
        while(fibonacci_pair.value2 <= END_NUMBER){
            sum+=fibonacci_pair.value2;
            fibonacci_pair = next_even_fibonacci_pair(fibonacci_pair);
        }
        return sum;

    }


}
